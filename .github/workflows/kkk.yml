name: Windows

on:
  workflow_dispatch:

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Enable RDP
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0
          Enable-NetFirewallRule -DisplayGroup 'Remote Desktop'
          Set-LocalUser -Name 'runneradmin' -Password (ConvertTo-SecureString -AsPlainText 'Pass123!' -Force)
          Write-Host "✅ RDP etkinleştirildi"

      - name: Download Ngrok
        shell: pwsh
        run: |
          Write-Host "📥 Ngrok indiriliyor..."
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile ngrok.zip
          Expand-Archive ngrok.zip -DestinationPath . -Force
          Remove-Item ngrok.zip -Force
          Write-Host "✅ Ngrok hazırlandı"

      - name: Configure Ngrok
        shell: pwsh
        run: |
          Write-Host "🔑 Ngrok yapılandırılıyor..."
          & .\ngrok.exe config add-authtoken "2h77XN9Ic3xIZXMxvCkkVigsbqm_6ZHkqfguxg8V1GoGe7WuP"
          Write-Host "✅ Auth token yapılandırıldı"

      - name: Start Ngrok and Display Connection
        shell: pwsh
        run: |
          Write-Host "🚀 Ngrok başlatılıyor..."
          
          # Ngrok'u başlat ve çıktıyı dosyaya yaz
          Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp 3389" -RedirectStandardOutput "ngrok.txt" -WindowStyle Hidden
          
          # Ngrok'un başlaması için bekle
          Start-Sleep -Seconds 15
          
          # Çıktıyı oku
          if (Test-Path "ngrok.txt") {
            $ngrokOutput = Get-Content "ngrok.txt" -Raw
            Write-Host "Ngrok çıktısı:"
            Write-Host $ngrokOutput
          }
          
          # Alternatif yöntem: Ngrok API'yi dene
          Write-Host ""
          Write-Host "🔍 Bağlantı bilgileri alınıyor..."
          Start-Sleep -Seconds 5
          
          try {
            # Ngrok web arayüzünden bilgi al
            $response = Invoke-WebRequest -Uri "http://localhost:4040/status" -UseBasicParsing -TimeoutSec 10
            Write-Host "Ngrok Status:"
            Write-Host $response.Content
            
            # API'den tunnel bilgisini al
            $tunnels = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -TimeoutSec 10
            if ($tunnels.tunnels) {
              $tunnel = $tunnels.tunnels[0]
              $url = $tunnel.public_url
              
              # TCP URL'ini parse et
              if ($url -match "tcp://(.+):(\d+)") {
                $host = $matches[1]
                $port = $matches[2]
                
                Write-Host ""
                Write-Host "=================================================="
                Write-Host "🖥️ RDP BAĞLANTI BİLGİLERİ"
                Write-Host "=================================================="
                Write-Host "📍 Host: $host"
                Write-Host "🔌 Port: $port"
                Write-Host "👤 Kullanıcı: runneradmin"
                Write-Host "🔐 Şifre: Pass123!"
                Write-Host ""
                Write-Host "🔧 BAĞLANTI KOMUTLARI:"
                Write-Host "   mstsc /v:$host`:$port"
                Write-Host "   xfreerdp /v:$host`:$port /u:runneradmin /p:Pass123! /cert-ignore"
                Write-Host "   rdesktop -u runneradmin -p Pass123! $host`:$port"
                Write-Host "=================================================="
              }
            }
          } catch {
            Write-Host "⚠️ Otomatik bilgi alınamadı. Manuel kontrol:"
            Write-Host ""
            Write-Host "1. Tarayıcıda açın: http://localhost:4040"
            Write-Host "2. Gösterilen tcp://xxx.ngrok.io:PORT adresini kullanın"
            Write-Host ""
            Write-Host "RDP Bilgileri:"
            Write-Host "Kullanıcı: runneradmin"
            Write-Host "Şifre: Pass123!"
          }
          
          # Son çare: Process çıktısını kontrol et
          Write-Host ""
          Write-Host "📋 Ngrok Process Kontrolü:"
          Get-Process -Name "ngrok" -ErrorAction SilentlyContinue | Format-Table Id, ProcessName, StartTime
          
          # Alternatif log konumu
          $ngrokLog = "$env:LOCALAPPDATA\ngrok\ngrok.log"
          if (Test-Path $ngrokLog) {
            Write-Host ""
            Write-Host "📄 Ngrok Log (son 20 satır):"
            Get-Content $ngrokLog -Tail 20
          }

      - name: Keep Session Alive
        shell: pwsh
        run: |
          Write-Host "🕐 Oturum 6 saat açık kalacak..."
          Write-Host ""
          Write-Host "ℹ️ SORUN GİDERME:"
          Write-Host "1. Workflow çıktısında tcp://xxx.ngrok.io:PORT formatında bir adres arayın"
          Write-Host "2. Bu adresi RDP istemcinizde kullanın"
          Write-Host "3. Kullanıcı: runneradmin, Şifre: Pass123!"
          Write-Host ""
          
          # Her 30 dakikada durum kontrolü
          $startTime = Get-Date
          while ((Get-Date) -lt $startTime.AddHours(6)) {
            # Ngrok durumunu kontrol et
            try {
              $status = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -TimeoutSec 5 -ErrorAction SilentlyContinue
              if ($status.tunnels) {
                $tunnel = $status.tunnels[0]
                Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ✅ Ngrok aktif: $($tunnel.public_url)"
              }
            } catch {
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ⚠️ Ngrok durumu kontrol edilemiyor"
            }
            
            # 30 dakika bekle
            Start-Sleep -Seconds 1800
          }
