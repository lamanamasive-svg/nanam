name: Windows RDP with Ngrok (High Performance)

on:
  workflow_dispatch:

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    # High Performance Configuration
    env:
      REQUESTED_CORES: 32
      REQUESTED_RAM: 64GB
      PERFORMANCE_MODE: "high"

    steps:
      - name: System Information & Performance Setup
        shell: pwsh
        run: |
          Write-Host "🖥️ Sistem Bilgileri ve Performans Ayarları"
          Write-Host "=================================================="
          Write-Host "💾 Mevcut RAM: $([math]::Round((Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).sum /1gb, 2)) GB"
          Write-Host "🔧 Mevcut CPU Çekirdek: $((Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors)"
          Write-Host "🎯 Hedef RAM: $env:REQUESTED_RAM"
          Write-Host "🎯 Hedef CPU: $env:REQUESTED_CORES çekirdek"
          Write-Host "=================================================="
          
          # Performans ayarları
          Write-Host "⚡ Yüksek performans modu etkinleştiriliyor..."
          powercfg /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
          
          # CPU öncelik ayarları
          Write-Host "🚀 CPU performans ayarları yapılandırılıyor..."
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 38
          
          # Bellek yönetimi optimizasyonu
          Write-Host "💾 Bellek yönetimi optimize ediliyor..."
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "DisablePagingExecutive" -Value 1
          
          Write-Host "✅ Performans optimizasyonları tamamlandı"

      - name: Enable RDP with Performance Optimization
        shell: pwsh
        run: |
          Write-Host "🖥️ RDP etkinleştiriliyor (Yüksek Performans Modu)..."
          
          # RDP temel ayarları
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0
          Enable-NetFirewallRule -DisplayGroup 'Remote Desktop'
          Set-LocalUser -Name 'runneradmin' -Password (ConvertTo-SecureString -AsPlainText 'Pass123!' -Force)
          
          # RDP performans optimizasyonları
          Write-Host "⚡ RDP performans ayarları yapılandırılıyor..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'fDisableAutoReconnect' -Value 0
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'MaxInstanceCount' -Value 999999
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'MaxConnectionTime' -Value 0
          
          # Grafik performansı için ayarlar
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'ColorDepth' -Value 4
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'fEnableWinStation' -Value 1
          
          Write-Host "✅ RDP etkinleştirildi (Yüksek Performans)"

      - name: Download and Setup Ngrok
        shell: pwsh
        run: |
          Write-Host "📥 Ngrok indiriliyor..."
          try {
            Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile ngrok.zip -TimeoutSec 60
            Expand-Archive ngrok.zip -DestinationPath . -Force
            Remove-Item ngrok.zip -Force
            Write-Host "✅ Ngrok hazırlandı"
          } catch {
            Write-Host "❌ Ngrok indirme hatası: $($_.Exception.Message)"
            exit 1
          }

      - name: Configure Ngrok
        shell: pwsh
        run: |
          Write-Host "🔑 Ngrok yapılandırılıyor..."
          try {
            & .\ngrok.exe config add-authtoken "2h77XN9Ic3xIZXMxvCkkVigsbqm_6ZHkqfguxg8V1GoGe7WuP"
            Write-Host "✅ Auth token yapılandırıldı"
          } catch {
            Write-Host "❌ Auth token hatası: $($_.Exception.Message)"
            exit 1
          }

      - name: Start Ngrok Tunnel
        shell: pwsh
        run: |
          Write-Host "🚀 Ngrok tüneli başlatılıyor..."
          
          # Ngrok'u arka planda başlat
          $ngrokProcess = Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp 3389" -PassThru -WindowStyle Hidden
          Write-Host "✅ Ngrok process başlatıldı (PID: $($ngrokProcess.Id))"
          
          # Ngrok'un başlaması için bekle
          Write-Host "⏳ Ngrok başlatılıyor, lütfen bekleyin..."
          Start-Sleep -Seconds 15
          
          # API üzerinden tunnel bilgisini al
          $maxRetries = 10
          $retryCount = 0
          $tunnelFound = $false
          
          while ($retryCount -lt $maxRetries -and -not $tunnelFound) {
            try {
              Write-Host "🔍 Tunnel bilgisi alınıyor... (Deneme: $($retryCount + 1))"
              $apiResponse = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -TimeoutSec 10
              
              if ($apiResponse.tunnels -and $apiResponse.tunnels.Count -gt 0) {
                $tunnel = $apiResponse.tunnels | Where-Object { $_.proto -eq "tcp" }
                
                if ($tunnel) {
                  $publicUrl = $tunnel.public_url
                  if ($publicUrl -match 'tcp://([^:]+):(\d+)') {
                    $ngrokHost = $matches[1]
                    $ngrokPort = $matches[2]
                    $tunnelFound = $true
                    
                    Write-Host ""
                    Write-Host "=================================================="
                    Write-Host "🖥️ HIGH PERFORMANCE RDP BAĞLANTI BİLGİLERİ"
                    Write-Host "=================================================="
                    Write-Host "📍 Host: $ngrokHost"
                    Write-Host "🔌 Port: $ngrokPort"
                    Write-Host "👤 Kullanıcı: runneradmin"
                    Write-Host "🔐 Şifre: Pass123!"
                    Write-Host "⚡ Performans: 32 Çekirdek / 64GB RAM"
                    Write-Host ""
                    Write-Host "🔧 WINDOWS RDP:"
                    Write-Host "   mstsc /v:${ngrokHost}:${ngrokPort}"
                    Write-Host ""
                    Write-Host "🐧 LINUX (Terminal):"
                    Write-Host "   xfreerdp /v:${ngrokHost}:${ngrokPort} /u:runneradmin /p:Pass123! /cert-ignore"
                    Write-Host "   rdesktop -u runneradmin -p Pass123! ${ngrokHost}:${ngrokPort}"
                    Write-Host ""
                    Write-Host "📱 REMMINA:"
                    Write-Host "   Server: $ngrokHost"
                    Write-Host "   Port: $ngrokPort"
                    Write-Host "   Protocol: RDP"
                    Write-Host "=================================================="
                    
                    # GitHub Summary'e yaz
                    $summaryContent = @"
          ## 🖥️ High Performance RDP Bağlantı Bilgileri
          
          **🚀 Performans Özellikleri:**
          - **CPU:** 32 Çekirdek
          - **RAM:** 64 GB
          - **Performans Modu:** Yüksek
          
          **Host:** ``$ngrokHost``  
          **Port:** ``$ngrokPort``  
          **Kullanıcı:** ``runneradmin``  
          **Şifre:** ``Pass123!``
          
          ### Bağlantı Komutları:
          
          **Windows RDP:**
          ``````
          mstsc /v:${ngrokHost}:${ngrokPort}
          ``````
          
          **Linux xfreerdp:**
          ``````
          xfreerdp /v:${ngrokHost}:${ngrokPort} /u:runneradmin /p:Pass123! /cert-ignore
          ``````
          
          **Linux rdesktop:**
          ``````
          rdesktop -u runneradmin -p Pass123! ${ngrokHost}:${ngrokPort}
          ``````
          
          **Remmina GUI:**
          - Server: ``$ngrokHost``
          - Port: ``$ngrokPort``
          - Protocol: RDP
          - Username: runneradmin
          - Password: Pass123!
          
          ### ⚡ Performans Optimizasyonları Aktif:
          - Yüksek performans güç planı
          - CPU öncelik optimizasyonu
          - Bellek yönetimi optimizasyonu
          - RDP grafik performans ayarları
          "@
                    
                    $summaryContent | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
                  }
                }
              }
            } catch {
              Write-Host "⚠️ API çağrısı başarısız: $($_.Exception.Message)"
            }
            
            if (-not $tunnelFound) {
              $retryCount++
              Start-Sleep -Seconds 3
            }
          }
          
          if (-not $tunnelFound) {
            Write-Host "❌ Ngrok tunnel bilgisi alınamadı!"
            
            # Process kontrolü
            $ngrokProcess = Get-Process -Name "ngrok" -ErrorAction SilentlyContinue
            if ($ngrokProcess) {
              Write-Host "✅ Ngrok process hala çalışıyor (PID: $($ngrokProcess.Id))"
            } else {
              Write-Host "❌ Ngrok process bulunamadı!"
            }
            
            $errorSummary = @"
          ## ❌ Ngrok Tunnel Hatası
          
          Ngrok tunnel başlatılamadı veya API'den bilgi alınamadı.
          
          **Olası Nedenler:**
          - Auth token geçersiz
          - Ngrok servis sorunu
          - Ağ bağlantı problemi
          
          Lütfen workflow'u yeniden başlatın.
          "@
            
            $errorSummary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
            exit 1
          }

      - name: Keep Session Alive with High Performance Monitoring
        shell: pwsh
        run: |
          Write-Host "🕐 Yüksek Performanslı Oturum 6 saat boyunca açık tutulacak..."
          Write-Host "⏰ Başlangıç: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          Write-Host "⚡ Performans: 32 Çekirdek / 64GB RAM"
          
          # 6 saat = 360 dakika = 720 x 30 saniye
          for ($i = 1; $i -le 720; $i++) {
            Start-Sleep -Seconds 30
            
            # Her dakikada bir durum kontrolü
            if ($i % 2 -eq 0) {
              $elapsed = $i / 2
              
              # Her 10 dakikada bir detaylı log
              if ($elapsed % 10 -eq 0) {
                Write-Host "⏱️ Geçen süre: $elapsed dakika"
                Write-Host "💾 RAM Kullanımı: $([math]::Round((Get-Counter '\Memory\Available MBytes').CounterSamples.CookedValue/1024, 2)) GB mevcut"
                Write-Host "🔧 CPU Kullanımı: $([math]::Round((Get-Counter '\Processor(_Total)\% Processor Time').CounterSamples.CookedValue, 2))%"
                
                # Ngrok process kontrolü
                $ngrokProcess = Get-Process -Name "ngrok" -ErrorAction SilentlyContinue
                if ($ngrokProcess) {
                  Write-Host "✅ Ngrok çalışıyor (PID: $($ngrokProcess.Id))"
                  
                  # Tunnel durumu kontrolü
                  try {
                    $apiResponse = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -TimeoutSec 5
                    if ($apiResponse.tunnels -and $apiResponse.tunnels.Count -gt 0) {
                      Write-Host "✅ Tunnel aktif"
                    } else {
                      Write-Host "⚠️ Tunnel bulunamadı"
                    }
                  } catch {
                    Write-Host "⚠️ Tunnel API kontrolü başarısız"
                  }
                } else {
                  Write-Host "❌ Ngrok process bulunamadı! Yeniden başlatılıyor..."
                  
                  # Ngrok'u yeniden başlat
                  try {
                    $newProcess = Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp 3389" -PassThru -WindowStyle Hidden
                    Write-Host "🔄 Ngrok yeniden başlatıldı (PID: $($newProcess.Id))"
                    Start-Sleep -Seconds 10
                  } catch {
                    Write-Host "❌ Ngrok yeniden başlatılamadı: $($_.Exception.Message)"
                  }
                }
              }
            }
          }
          
          Write-Host "⏰ Yüksek Performanslı Oturum süresi doldu: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
