name: Windows RDP with Ngrok Auth

on:
  workflow_dispatch:

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Enable RDP
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0
          Enable-NetFirewallRule -DisplayGroup 'Remote Desktop'
          Set-LocalUser -Name 'runneradmin' -Password (ConvertTo-SecureString -AsPlainText 'Pass123!' -Force)
          Write-Host "✅ RDP etkinleştirildi"

      - name: Configure RDP for Better Compatibility
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'SecurityLayer' -Value 0
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'fAllowSecProtocolNegotiation' -Value 0
          Restart-Service TermService -Force
          Write-Host "✅ RDP uyumluluk ayarları yapıldı"

      - name: Download and Setup Ngrok
        shell: pwsh
        run: |
          Write-Host "📥 Ngrok indiriliyor..."
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile ngrok.zip
          Expand-Archive ngrok.zip -DestinationPath . -Force
          Remove-Item ngrok.zip -Force
          Write-Host "✅ Ngrok hazırlandı"

      - name: Configure Ngrok Auth Token
        shell: pwsh
        run: |
          Write-Host "🔑 Ngrok auth token yapılandırılıyor..."
          & .\ngrok.exe config add-authtoken "2h77XN9Ic3xIZXMxvCkkVigsbqm_6ZHkqfguxg8V1GoGe7WuP"
          Write-Host "✅ Auth token yapılandırıldı"

      - name: Start Ngrok Tunnel and Show Connection Info
        shell: pwsh
        run: |
          Write-Host "🚀 Ngrok TCP tüneli başlatılıyor..."
          
          # Ngrok'u arka planda başlat
          $job = Start-Job -ScriptBlock {
            & .\ngrok.exe tcp 3389 --log stdout
          }
          
          # 25 saniye bekle
          Start-Sleep -Seconds 25
          
          # Tunnel bilgisini al
          $tunnelFound = $false
          for ($i = 1; $i -le 15; $i++) {
            try {
              $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -Method Get -TimeoutSec 5
              
              if ($response.tunnels -and $response.tunnels.Count -gt 0) {
                $tunnel = $response.tunnels | Where-Object { $_.proto -eq "tcp" } | Select-Object -First 1
                
                if ($tunnel -and $tunnel.public_url) {
                  $publicUrl = $tunnel.public_url
                  $parts = $publicUrl -replace "tcp://", "" -split ":"
                  $host = $parts[0]
                  $port = $parts[1]
                  
                  Write-Host ""
                  Write-Host "=================================================="
                  Write-Host "🖥️ WINDOWS RDP BAĞLANTI BİLGİLERİ"
                  Write-Host "=================================================="
                  Write-Host "📍 Host: $host"
                  Write-Host "🔌 Port: $port"
                  Write-Host "👤 Kullanıcı: runneradmin"
                  Write-Host "🔐 Şifre: Pass123!"
                  Write-Host ""
                  Write-Host "🖥️ REMMINA AYARLARI:"
                  Write-Host "   • Protokol: RDP"
                  Write-Host "   • Sunucu: $host"
                  Write-Host "   • Port: $port"
                  Write-Host "   • Kullanıcı: runneradmin"
                  Write-Host "   • Şifre: Pass123!"
                  Write-Host "   • Güvenlik: RDP"
                  Write-Host "   • Disable encryption: ✓"
                  Write-Host "   • Ignore certificate: ✓"
                  Write-Host ""
                  Write-Host "🔧 LINUX KOMUTLARI:"
                  Write-Host "   xfreerdp /v:$host`:$port /u:runneradmin /p:Pass123! /cert-ignore /sec:rdp"
                  Write-Host "   rdesktop -u runneradmin -p Pass123! $host`:$port"
                  Write-Host ""
                  Write-Host "📱 WINDOWS/MAC/MOBILE:"
                  Write-Host "   Microsoft Remote Desktop uygulamasını kullanın"
                  Write-Host ""
                  Write-Host "🔍 BAĞLANTI TESTİ:"
                  Write-Host "   telnet $host $port"
                  Write-Host "=================================================="
                  
                  # Bağlantı testi
                  Write-Host ""
                  Write-Host "🔍 Port erişilebilirlik testi yapılıyor..."
                  try {
                    $tcpClient = New-Object System.Net.Sockets.TcpClient
                    $connect = $tcpClient.BeginConnect($host, $port, $null, $null)
                    $wait = $connect.AsyncWaitHandle.WaitOne(5000, $false)
                    
                    if ($wait -and $tcpClient.Connected) {
                      Write-Host "✅ Port $port erişilebilir - RDP bağlantısı hazır!"
                      $tcpClient.Close()
                    } else {
                      Write-Host "⚠️ Port erişim testi başarısız"
                      $tcpClient.Close()
                    }
                  } catch {
                    Write-Host "⚠️ Bağlantı testi hatası: $($_.Exception.Message)"
                  }
                  
                  $tunnelFound = $true
                  break
                }
              }
            } catch {
              Write-Host "API denemesi $i başarısız, tekrar deneniyor..."
            }
            
            Start-Sleep -Seconds 3
          }
          
          if (-not $tunnelFound) {
            Write-Host "❌ Tunnel bilgisi alınamadı. Job çıktısını kontrol ediliyor..."
            $jobOutput = Receive-Job -Job $job -Keep
            if ($jobOutput) {
              Write-Host "=== NGROK ÇIKTISI ==="
              $jobOutput | ForEach-Object { Write-Host $_ }
              Write-Host "===================="
            }
            Write-Host ""
            Write-Host "🌐 Manuel kontrol için Ngrok web arayüzü: http://localhost:4040"
          }

      - name: Keep Session Alive with Monitoring
        shell: pwsh
        run: |
          Write-Host "🕐 Oturum 6 saat boyunca açık tutulacak..."
          Write-Host "⏰ Başlangıç: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          
          # Her 30 dakikada durum kontrolü
          for ($i = 1; $i -le 720; $i++) {
            Start-Sleep -Seconds 30
            
            if ($i % 60 -eq 0) {  # Her 30 dakikada
              $elapsed = $i / 2
              Write-Host "⏱️ Geçen süre: $elapsed dakika - RDP aktif"
              
              # Ngrok durumunu kontrol et
              try {
                $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -Method Get -TimeoutSec 3 -ErrorAction SilentlyContinue
                if ($response -and $response.tunnels) {
                  $tunnel = $response.tunnels | Where-Object { $_.proto -eq "tcp" } | Select-Object -First 1
                  if ($tunnel) {
                    $publicUrl = $tunnel.public_url -replace "tcp://", ""
                    Write-Host "📍 RDP adresi: $publicUrl"
                    Write-Host "🌐 Web panel: http://localhost:4040"
                  }
                }
              } catch {
                Write-Host "⚠️ Ngrok durumu kontrol edilemiyor"
              }
            }
          }
          
          Write-Host "⏰ Oturum süresi doldu: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
